import numpy as np
from math import factorial as fact
from math import floor, log

class Stehfest:
    def __init__(self, n):
        self.n = n
        self.coefs = self.generate_coefficients()

    def generate_coefficients(self):
        """Generate Stehfest's algorithm coefficients.

        Keyword arguments:
        n -- Stehfest's input variable
        """
        n = self.n
        coefs = [0]*n
        for k in range(1, n+1):
            i = floor((k+1)/2)
            max_i = min(k, n/2)
            while i <= max_i:
                num = i**(n/2) * fact(2*i)
                den = fact(n/2-i) * fact(i) * fact(i-1) * fact(k-i) * fact(2*i-k)
                i += 1
                coefs[k-1] += num/den
            coefs[k-1] = (-1)**(k+n/2)*coefs[k-1]
        return np.array(coefs)


    def run(self, time_array, laplace_function, *args):
        """
        Calculate the value of F(t) based on the values generated by L{F}

        Keyword arguments:
        n -- number of coefficients to be calculated, usually in [8,16]
        time_array -- desired time array
        laplace_function -- a function object representing L{F}
        """
        output = np.zeros_like(time_array)
        for i,t in enumerate(time_array):
            params = np.arange(1, self.n+1) * log(2)/t
            results = laplace_function(params, *args)
            values = self.coefs * results
            output[i] = np.sum(values) * log(2)/t
        return output

